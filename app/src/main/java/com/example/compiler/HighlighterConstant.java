package com.example.compiler;

import java.util.HashMap;
import java.util.regex.Pattern;

//import com.freeit.java.C0669R;

public class HighlighterConstant {
    private HashMap<String, PatternInfo[]> map = new HashMap();

    public static class Patterns {
        //   public static PatternInfo[] ASPNet = new PatternInfo[]{new PatternInfo(Pattern.compile(".*\\n"), R.color.ch_plain_text, C0669R.color.ch_plain_text), new PatternInfo(Pattern.compile("(?s)<!--.*?-->|(\\S+)=[\"']?((?:.(?![\"']?\\s+(?:\\S+)=|[>\"']))+.)[\"']?"), R.color.ch_keywords, C0669R.color.ch_keywords), new PatternInfo(Pattern.compile("(?s)<!--.*?-->|<([A-Za-z][A-Za-z0-9]*)\\b[^>]*>|</([A-Za-z][A-Za-z0-9]*)\\b[^>]*>"), C0669R.color.ch_keywords, C0669R.color.ch_keywords), new PatternInfo(Pattern.compile("(?s)<!--.*?-->|\"(.*?)\"|'(.*?)'"), C0669R.color.ch_strings, C0669R.color.ch_strings), new PatternInfo(Pattern.compile("(?s)<!--.*?-->"), C0669R.color.ch_comment, C0669R.color.ch_comment)};
        //   public static PatternInfo[] Assembly = new PatternInfo[]{new PatternInfo(Pattern.compile(".*\\n"), R.color.ch_plain_text, C0669R.color.ch_plain_text), new PatternInfo(Pattern.compile("(;.*)|(?<=\\b)(AAA|AAD|AAM|AAS|ADC|ADD|AND|CALL|CBW|CLC|CLD|CLI|CMC|CMP|CMPSB|CMPSW|CWD|DAA|DAS|DEC|DIV|HLT|IDIV|IMUL|IN|INC|INT|INTO|IRET|JA|JAE|JB|JBE|JC|JCXZ|JE|JG|JGE|JL|JLE|JMP|JNA|JNAE|JNB|JNBE|JNC|JNE|JNG|JNGE|JNL|JNLE|JNO|JNP|JNS|JNZ|JO|JP|JPE|JPO|JS|JZ|LAHF|LDS|LEA|LES|LODSB|LODSW|LOOP|LOOPE|LOOPNE|LOOPNZ|LOOPZ|MOV|MOVSB|MOVSW|MUL|NEG|NOP|NOT|OR|OUT|POP|POPA|POPF|PUSH|PUSHA|PUSHF|RCL|RCR|REP|REPE|REPNE|REPNZ|REPZ|RET|RETF|ROL|ROR|SAHF|SAL|SAR|SBB|SCASB|SCASW|SHL|SHR|STC|STD|STI|STOSB|STOSW|SUB|TEST|XCHG|XLATB|XOR)(?=\\b)", 2), C0669R.color.ch_keywords, C0669R.color.ch_keywords), new PatternInfo(Pattern.compile("(;.*)|(?<=\\b)(AX|BX|CX|DX|SP|BP|SI|DI|CS|DS|SS|ES|IP)(?=\\b)", 2), C0669R.color.ch_keywords, C0669R.color.ch_keywords), new PatternInfo(Pattern.compile("(;.*)|(?<=\\b)(10h|11h|12h|13h|15h|16h|16h|19h|1Ah|20h|21h|33h)(?=\\b)", 2), C0669R.color.ch_literals, C0669R.color.ch_literals), new PatternInfo(Pattern.compile("(;.*)|\"(.*?)\"|'(.*?)'"), C0669R.color.ch_strings, C0669R.color.ch_strings), new PatternInfo(Pattern.compile("(;.*)|(?<=\\b)(AAA|AAD|AAM|AAS|ADC|ADD|AND|CALL|CBW|CLC|CLD|CLI|CMC|CMP|CMPSB|CMPSW|CWD|DAA|DAS|DEC|DIV|HLT|IDIV|IMUL|IN|INC|INT|INTO|IRET|JA|JAE|JB|JBE|JC|JCXZ|JE|JG|JGE|JL|JLE|JMP|JNA|JNAE|JNB|JNBE|JNC|JNE|JNG|JNGE|JNL|JNLE|JNO|JNP|JNS|JNZ|JO|JP|JPE|JPO|JS|JZ|LAHF|LDS|LEA|LES|LODSB|LODSW|LOOP|LOOPE|LOOPNE|LOOPNZ|LOOPZ|MOV|MOVSB|MOVSW|MUL|NEG|NOP|NOT|OR|OUT|POP|POPA|POPF|PUSH|PUSHA|PUSHF|RCL|RCR|REP|REPE|REPNE|REPNZ|REPZ|RET|RETF|ROL|ROR|SAHF|SAL|SAR|SBB|SCASB|SCASW|SHL|SHR|STC|STD|STI|STOSB|STOSW|SUB|TEST|XCHG|XLATB|XOR)(?=\\b)", 2), C0669R.color.ch_keywords, C0669R.color.ch_keywords), new PatternInfo(Pattern.compile("(;.*)"), C0669R.color.ch_comment, C0669R.color.ch_comment)};
        //  public static PatternInfo[] Bash = new PatternInfo[]{new PatternInfo(Pattern.compile(".*\\n"), R.color.ch_plain_text, C0669R.color.ch_plain_text), new PatternInfo(Pattern.compile("(#.*)|(?<=\\b)(if|then|else|elif|fi|for|while|in|do|done|case|esac|function)(?=\\b)"), R.color.ch_keywords, C0669R.color.ch_keywords), new PatternInfo(Pattern.compile("(#.*)|(?<=\\b)(break|cd|continue|eval|exec|exit|export|getopts|hash|pwd|readonly|return|shift|test|times|trap|umask|unset|alias|bind|builtin|caller|command|declare|echo|enable|help|let|local|logout|mapfile|printf|read|readarray|source|type|typeset|ulimit|unalias|set|shopt|autoload|bg|bindkey|bye|cap|chdir|clone|comparguments|compcall|compctl|compdescribe|compfiles|compgroups|compquote|comptags|comptry|compvalues|dirs|disable|disown|echotc|echoti|emulate|fc|fg|float|functions|getcap|getln|history|integer|jobs|kill|limit|log|noglob|popd|print|pushd|pushln|rehash|sched|setcap|setopt|stat|suspend|ttyctl|unfunction|unhash|unlimit|unsetopt|vared|wait|whence|where|which|zcompile|zformat|zftp|zle|zmodload|zparseopts|zprof|zpty|zregexparse|zsocket|zstyle|ztcp)(?=\\b)"), C0669R.color.ch_keywords, C0669R.color.ch_keywords), new PatternInfo(Pattern.compile("(#.*)|\\b(true|false)\\b"), C0669R.color.ch_literals, C0669R.color.ch_literals), new PatternInfo(Pattern.compile("(#.*)|\\\".*?\\\"|\\b(\\d*[.]?\\d+)\\b"), C0669R.color.ch_numbers, C0669R.color.ch_numbers), new PatternInfo(Pattern.compile("(#.*)|\"(.*?)\"|'(.*?)'"), C0669R.color.ch_strings, C0669R.color.ch_strings), new PatternInfo(Pattern.compile("(#.*)"), C0669R.color.ch_comment, C0669R.color.ch_comment)};
        /* renamed from: C */


        public static PatternInfo[] C = new PatternInfo[]{new PatternInfo(Pattern.compile(".*\\n"), R.color.ch_plain_text, R.color.ch_plain_text), new PatternInfo(Pattern.compile("/\\*(?:.|[\\n\\r])*?\\*/|//.*+\\/\\/.*|\\/\\/.*|\\\".*?\\\"|\\b(\\d*[.]?\\d+)\\b"), R.color.ch_numbers, R.color.ch_numbers), new PatternInfo(Pattern.compile("/\\*(?:.|[\\n\\r])*?\\*/|//.*+\\/\\/.*|\\/\\/.*|^[\t ]*(#define|#include|#if|#ifdef|#ifndef|#else|#elif|#endif|#error|#pragma|#extension|#version|#line)\\b", 8), R.color.ch_keywords, R.color.ch_keywords), new PatternInfo(Pattern.compile("/\\*(?:.|[\\n\\r])*?\\*/|//.*+\\/\\/.*|\\/\\/.*|\\\".*?\\\"|\\b(int|float|while|private|char|catch|export|virtual|operator|sizeof|dynamic_cast|typedef|const_cast|10|const|struct|for|static_cast|10|union|namespace|unsigned|long|volatile|static|protected|bool|template|mutable|if|public|friend|do|goto|auto|void|enum|else|break|extern|using|class|asm|case|typeid|short|reinterpret_cast|10|default|double|register|explicit|signed|typename|try|this|switch|continue|inline|delete|alignof|constexpr|decltype|noexcept|static_assert|thread_local|restrict|_Bool|complex|_Complex|_Imaginary|atomic_bool|atomic_char|atomic_schar|atomic_uchar|atomic_short|atomic_ushort|atomic_int|atomic_uint|atomic_long|atomic_ulong|atomic_llong|atomic_ullong|new|throw|return)\\b"), R.color.ch_keywords, R.color.ch_keywords), new PatternInfo(Pattern.compile("/\\*(?:.|[\\n\\r])*?\\*/|//.*+\\/\\/.*|\\/\\/.*|\\\".*?\\\"|\\b(std|string|cin|cout|cerr|clog|stdin|stdout|stderr|stringstream|istringstream|ostringstream|auto_ptr|deque|list|queue|stack|vector|map|set|bitset|multiset|multimap|unordered_set|unordered_map|unordered_multiset|unordered_multimap|array|shared_ptr|abort|abs|acos|asin|atan2|atan|calloc|ceil|cosh|cos|exit|exp|fabs|floor|fmod|fprintf|fputs|free|frexp|fscanf|isalnum|isalpha|iscntrl|isdigit|isgraph|islower|isprint|ispunct|isspace|isupper|isxdigit|tolower|toupper|labs|ldexp|log10|log|malloc|realloc|memchr|memcmp|memcpy|memset|modf|pow|printf|putchar|puts|scanf|sinh|sin|snprintf|sprintf|sqrt|sscanf|strcat|strchr|strcmp|strcpy|strcspn|strlen|strncat|strncmp|strncpy|strpbrk|strrchr|strspn|strstr|tanh|tan|vfprintf|vprintf|vsprintf|endl|initializer_list|unique_ptr)\\b"), R.color.ch_keywords, R.color.ch_keywords), new PatternInfo(Pattern.compile("/\\*(?:.|[\\n\\r])*?\\*/|//.*+\\/\\/.*|\\/\\/.*|\"(.*?)\"|'(.*?)'"), R.color.ch_strings, R.color.ch_strings), new PatternInfo(Pattern.compile("<(.*?)>"), R.color.ch_strings, R.color.ch_strings), new PatternInfo(Pattern.compile("\\/\\/.*"), R.color.ch_comment, R.color.ch_comment), new PatternInfo(Pattern.compile("/\\*(?:.|[\\n\\r])*?\\*/|//.*+\\/\\/.*"), R.color.ch_comment, R.color.ch_comment)};
        //  public static PatternInfo[] CSharp = new PatternInfo[]{new PatternInfo(Pattern.compile(".*\\n"), R.color.ch_plain_text, R.color.ch_plain_text), new PatternInfo(Pattern.compile("/\\*(?:.|[\\n\\r])*?\\*/|//.*+\\/\\/.*|\\/\\/.*|using\\s+([a-zA_Z_][\\.\\w]*);"), R.color.ch_strings, R.color.ch_strings), new PatternInfo(Pattern.compile("/\\*(?:.|[\\n\\r])*?\\*/|//.*+\\/\\/.*|\\/\\/.*|\\\".*?\\\"|\\b(\\d*[.]?\\d+)\\b"), R.color.ch_numbers, R.color.ch_numbers), new PatternInfo(Pattern.compile("/\\*(?:.|[\\n\\r])*?\\*/|//.*+\\/\\/.*|\\/\\/.*|\\\".*?\\\"|\\b(add|alias|ascending|async|await|descending|dynamic|from|get|global|group|into|join|let|orderby|partial|remove|select|set|value|var|yield|where)\\b"), R.color.ch_keywords, R.color.ch_keywords), new PatternInfo(Pattern.compile("/\\*(?:.|[\\n\\r])*?\\*/|//.*+\\/\\/.*|\\/\\/.*|\\\".*?\\\"|\\b(abstract|as|base|bool|break|byte|case|catch|char|checked|class|const|continue|decimal|default|delegate|do|double|else|enum|event|explicit|extern|false|finally|fixed|float|for|foreach|goto|if|implicit|in|in (generic modifier)|int|interface|internal|is|lock|long|namespace|new|null|object|operator|out|out (generic modifier)|override|params|private|protected|public|readonly|ref|return|sbyte|sealed|short|sizeof|stackalloc|static|string|struct|switch|this|throw|true|try|typeof|uint|ulong|unchecked|unsafe|ushort|using|virtual|void|volatile|while)\\b"), C0669R.color.ch_keywords, C0669R.color.ch_keywords), new PatternInfo(Pattern.compile("/\\*(?:.|[\\n\\r])*?\\*/|//.*+\\/\\/.*|\\/\\/.*|\"(.*?)\"|'(.*?)'"), C0669R.color.ch_strings, C0669R.color.ch_strings), new PatternInfo(Pattern.compile("\\/\\/.*"), C0669R.color.ch_comment, C0669R.color.ch_comment), new PatternInfo(Pattern.compile("/\\*(?:.|[\\n\\r])*?\\*/|//.*+\\/\\/.*"), C0669R.color.ch_comment, C0669R.color.ch_comment)};
        public static PatternInfo[] Java = new PatternInfo[]{new PatternInfo(Pattern.compile(".*\\n"), R.color.ch_plain_text, R.color.ch_plain_text), new PatternInfo(Pattern.compile("/\\*(?:.|[\\n\\r])*?\\*/|//.*+\\/\\/.*|\\/\\/.*|package\\s+([a-zA_Z_][\\.\\w]*);"), R.color.ch_strings, R.color.ch_strings), new PatternInfo(Pattern.compile("/\\*(?:.|[\\n\\r])*?\\*/|//.*+\\/\\/.*|\\/\\/.*|package\\s+[.];"), R.color.ch_strings, R.color.ch_strings), new PatternInfo(Pattern.compile("/\\*(?:.|[\\n\\r])*?\\*/|//.*+\\/\\/.*|\\/\\/.*|import\\s+([a-zA_Z_][\\.\\w]*);"), R.color.ch_strings, R.color.ch_strings), new PatternInfo(Pattern.compile("/\\*(?:.|[\\n\\r])*?\\*/|//.*+\\/\\/.*|\\/\\/.*|\\\".*?\\\"|\\b(\\d*[.]?\\d+)\\b"), R.color.ch_numbers, R.color.ch_numbers), new PatternInfo(Pattern.compile("/\\*(?:.|[\\n\\r])*?\\*/|//.*+\\/\\/.*|\\/\\/.*|\\\".*?\\\"|\\b(abstract|continue|for|new|switch|assert|default|package|synchronized|boolean|do|if|private|this|break|double|implements|protected|throw|byte|else|import|public|throws|case|enum|instanceof|return|transient|catch|extends|int|short|try|char|final|interface|static|void|class|finally|long|strictfp|volatile|float|native|super|while)\\b"), R.color.ch_keywords, R.color.ch_keywords), new PatternInfo(Pattern.compile("/\\*(?:.|[\\n\\r])*?\\*/|//.*+\\/\\/.*|\\/\\/.*|\"(.*?)\"|'(.*?)'"), R.color.ch_strings, R.color.ch_strings), new PatternInfo(Pattern.compile("(?s)<!--.*?-->"), R.color.ch_comment, R.color.ch_comment), new PatternInfo(Pattern.compile("\\/\\/.*"), R.color.ch_comment, R.color.ch_comment), new PatternInfo(Pattern.compile("/\\*(?:.|[\\n\\r])*?\\*/|//.*+\\/\\/.*"), R.color.ch_comment, R.color.ch_comment)};
        //  public static PatternInfo[] PHP = new PatternInfo[]{new PatternInfo(Pattern.compile(".*\\n"), R.color.ch_plain_text, R.color.ch_plain_text), new PatternInfo(Pattern.compile("(#.*)|(--.*)|(((/\\*)+?[\\w\\W]+?(\\*/)+))|\\\".*?\\\"|\\b(and|include_once|list|abstract|global|private|echo|interface|as|static|endswitch|array|null|if|endwhile|or|const|for|endforeach|self|var|while|isset|public|protected|exit|foreach|throw|elseif|include|__FILE__|empty|require_once|do|xor|return|parent|clone|use|__CLASS__|__LINE__|else|break|print|eval|new|catch|__METHOD__|case|exception|default|die|require|__FUNCTION__|enddeclare|final|try|switch|continue|endfor|endif|declare|unset|true|false|trait|goto|instanceof|insteadof|__DIR__|__NAMESPACE__|yield|finally)\\b"), R.color.ch_keywords, R.color.ch_keywords), new PatternInfo(Pattern.compile("(#.*)|/\\*(?:.|[\\n\\r])*?\\*/|//.*+\\/\\/.*|(\\/\\/.*)|\\$\\s*(\\w+)"), C0669R.color.ch_plain_text, C0669R.color.ch_plain_text), new PatternInfo(Pattern.compile("(#.*)|/\\*(?:.|[\\n\\r])*?\\*/|//.*+\\/\\/.*|(\\/\\/.*)|\\\".*?\\\"|\\b(\\d*[.]?\\d+)\\b"), C0669R.color.ch_numbers, C0669R.color.ch_numbers), new PatternInfo(Pattern.compile("(#.*)|/\\*(?:.|[\\n\\r])*?\\*/|//.*+\\/\\/.*|(\\/\\/.*)|\"(.*?)\"|'(.*?)'"), C0669R.color.ch_strings, C0669R.color.ch_strings), new PatternInfo(Pattern.compile("(#.*)|/\\*(?:.|[\\n\\r])*?\\*/|//.*+\\/\\/.*|(\\/\\/.*)"), C0669R.color.ch_comment, C0669R.color.ch_comment)};


        public static PatternInfo[] Python = new PatternInfo[]{
                new PatternInfo(Pattern.compile(".*\\n"), R.color.ch_plain_text, R.color.ch_plain_text),
                new PatternInfo(Pattern.compile("(#.*)|(?<=\\b)((int)|(float)|(long)|(complex)|(str)|(unicode)|(list)|(tuple)|(bytearray)|(buffer)|(xrange)|(set)|(frozenset)|(dict)|(bool)|(True)|(False)|(None)|(self)|(NotImplemented)|(Ellipsis)|(__debug__)|(__file__)|(and)|(del)|(from)|(not)|(while)|(as)|(elif)|(global)|(or)|(with)|(assert)|(else)|(if)|(pass)|(yield)|(break)|(except)|(import)|(print)|(class)|(exec)|(in)|(raise)|(continue)|(finally)|(is)|(return)|(def)|(for)|(lambda)|(try)|(ArithmeticError)|(AssertionError)|(AttributeError)|(BaseException)|(DeprecationWarning)|(EnvironmentError)|(EOFError)|(Exception)|(FloatingPointError)|(FutureWarning)|(GeneratorExit)|(IOError)|(ImportError)|(ImportWarning)|(IndexError)|(KeyError)|(KeyboardInterrupt)|(LookupError)|(MemoryError)|(NameError)|(NotImplementedError)|(OSError)|(OverflowError)|(PendingDeprecationWarning)|(ReferenceError)|(RuntimeError)|(RuntimeWarning)|(StandardError)|(StopIteration)|(SyntaxError)|(SyntaxWarning)|(SystemError)|(SystemExit)|(TypeError)|(UnboundLocalError)|(UserWarning)|(UnicodeError)|(UnicodeWarning)|(UnicodeEncodeError)|(UnicodeDecodeError)|(UnicodeTranslateError)|(ValueError)|(Warning)|(WindowsError)|(ZeroDivisionError))(?=\\b)", 2), R.color.ch_keywords, R.color.ch_keywords),
                new PatternInfo(Pattern.compile("(#.*)|(?<=\\b)(and|elif|is|global|as|in|if|from|raise|for|except|finally|print|import|pass|return|exec|else|break|not|with|class|assert|yield|try|while|continue|del|or|def|lambda|async|await|nonlocal|None|True|False)(?=\\b)", 2), R.color.ch_keywords, R.color.ch_keywords),
                new PatternInfo(Pattern.compile("(#.*)|\\\".*?\\\"|\\b(\\d*[.]?\\d+)\\b"), R.color.ch_numbers, R.color.ch_numbers),
                new PatternInfo(Pattern.compile("(#.*)|\"(.*?)\"|'(.*?)'"), R.color.ch_strings, R.color.ch_strings), new PatternInfo(Pattern.compile("(#.*)"), R.color.ch_comment, R.color.ch_comment)};


        //  public static PatternInfo[] RLang = new PatternInfo[]{new PatternInfo(Pattern.compile(".*\\n"), R.color.ch_plain_text, R.color.ch_plain_text), new PatternInfo(Pattern.compile("(#.*)|(?<=\\b)(function|if|in|break|next|repeat|else|for|return|switch|while|try|tryCatch|stop|warning|require|library|attach|detach|source|setMethod|setGeneric|setGroupGeneric|setClass|print)(?=\\b)", 2), R.color.ch_keywords, R.color.ch_keywords), new PatternInfo(Pattern.compile("(#.*)|\\b(NULL|NA|TRUE|FALSE|T|F|Inf|NaN|NA_integer_|NA_real_|NA_character_|NA_complex_)\\b", 2), R.color.ch_literals, C0669R.color.ch_literals), new PatternInfo(Pattern.compile("(#.*)|\\\".*?\\\"|\\b(\\d*[.]?\\d+)\\b"), R.color.ch_numbers, R.color.ch_numbers), new PatternInfo(Pattern.compile("(#.*)|\"(.*?)\"|'(.*?)'"), R.color.ch_strings, R.color.ch_strings), new PatternInfo(Pattern.compile("(#.*)"), R.color.ch_comment, C0669R.color.ch_comment)};
        //  public static PatternInfo[] Ruby = new PatternInfo[]{new PatternInfo(Pattern.compile(".*\\n"), R.color.ch_plain_text, R.color.ch_plain_text), new PatternInfo(Pattern.compile("(#.*)|(?<=\\b)(and|then|defined|module|in|return|redo|if|BEGIN|retry|end|for|self|when|next|until|do|begin|unless|END|rescue|else|break|undef|not|super|class|case|require|yield|alias|while|ensure|elsif|or|include|attr_reader|attr_writer|attr_accessor|puts)(?=\\b)", 2), R.color.ch_keywords, R.color.ch_keywords), new PatternInfo(Pattern.compile("(#.*)|\\b(true|false|nil)\\b", 2), R.color.ch_literals, C0669R.color.ch_literals), new PatternInfo(Pattern.compile("(#.*)|\\\".*?\\\"|\\b(\\d*[.]?\\d+)\\b"), R.color.ch_numbers, R.color.ch_numbers), new PatternInfo(Pattern.compile("(#.*)|\"(.*?)\"|'(.*?)'"), R.color.ch_strings, R.color.ch_strings), new PatternInfo(Pattern.compile("(#.*)"), R.color.ch_comment, C0669R.color.ch_comment)};
        //  public static PatternInfo[] SQL = new PatternInfo[]{new PatternInfo(Pattern.compile(".*\\n"), R.color.ch_plain_text, R.color.ch_plain_text), new PatternInfo(Pattern.compile("(#.*)|(--.*)|(((/\\*)+?[\\w\\W]+?(\\*/)+))|\\\".*?\\\"|\\b(A|ABORT|ABS|ABSOLUTE|ACCESS|ACTION|ADA|ADD|ADMIN|AFTER|AGGREGATE|ALIAS|ALL|ALLOCATE|ALSO|ALTER|ALWAYS|ANALYSE|ANALYZE|AND|ANY|ARE|ARRAY|AS|ASC|ASENSITIVE|ASSERTION|ASSIGNMENT|ASYMMETRIC|AT|ATOMIC|ATTRIBUTE|ATTRIBUTES|AUDIT|AUTHORIZATION|AUTO_INCREMENT|AVG|AVG_ROW_LENGTH|BACKUP|BACKWARD|BEFORE|BEGIN|BERNOULLI|BETWEEN|BIGINT|BINARY|BIT|BIT_LENGTH|BITVAR|BLOB|BOOL|BOOLEAN|BOTH|BREADTH|BREAK|BROWSE|BULK|BY|C|CACHE|CALL|CALLED|CARDINALITY|CASCADE|CASCADED|CASE|CAST|CATALOG|CATALOG_NAME|CEIL|CEILING|CHAIN|CHANGE|CHAR|CHAR_LENGTH|CHARACTER|CHARACTER_LENGTH|CHARACTER_SET_CATALOG|CHARACTER_SET_NAME|CHARACTER_SET_SCHEMA|CHARACTERISTICS|CHARACTERS|CHECK|CHECKED|CHECKPOINT|CHECKSUM|CLASS|CLASS_ORIGIN|CLOB|CLOSE|CLUSTER|CLUSTERED|COALESCE|COBOL|COLLATE|COLLATION|COLLATION_CATALOG|COLLATION_NAME|COLLATION_SCHEMA|COLLECT|COLUMN|COLUMN_NAME|COLUMNS|COMMAND_FUNCTION|COMMAND_FUNCTION_CODE|COMMENT|COMMIT|COMMITTED|COMPLETION|COMPRESS|COMPUTE|CONDITION|CONDITION_NUMBER|CONNECT|CONNECTION|CONNECTION_NAME|CONSTRAINT|CONSTRAINT_CATALOG|CONSTRAINT_NAME|CONSTRAINT_SCHEMA|CONSTRAINTS|CONSTRUCTOR|CONTAINS|CONTAINSTABLE|CONTINUE|CONVERSION|CONVERT|COPY|CORR|CORRESPONDING|COUNT|COVAR_POP|COVAR_SAMP|CREATE|CREATEDB|CREATEROLE|CREATEUSER|CROSS|CSV|CUBE|CUME_DIST|CURRENT|CURRENT_DATE|CURRENT_DEFAULT_TRANSFORM_GROUP|CURRENT_PATH|CURRENT_ROLE|CURRENT_TIME|CURRENT_TIMESTAMP|CURRENT_TRANSFORM_GROUP_FOR_TYPE|CURRENT_USER|CURSOR|CURSOR_NAME|CYCLE|DATA|DATABASE|DATABASES|DATE|DATETIME|DATETIME_INTERVAL_CODE|DATETIME_INTERVAL_PRECISION|DAY|DAY_HOUR|DAY_MICROSECOND|DAY_MINUTE|DAY_SECOND|DAYOFMONTH|DAYOFWEEK|DAYOFYEAR|DBCC|DEALLOCATE|DEC|DECIMAL|DECLARE|DEFAULT|DEFAULTS|DEFERRABLE|DEFERRED|DEFINED|DEFINER|DEGREE|DELAY_KEY_WRITE|DELAYED|DELETE|DELIMITER|DELIMITERS|DENSE_RANK|DENY|DEPTH|DEREF|DERIVED|DESC|DESCRIBE|DESCRIPTOR|DESTROY|DESTRUCTOR|DETERMINISTIC|DIAGNOSTICS|DICTIONARY|DISABLE|DISCONNECT|DISK|DISPATCH|DISTINCT|DISTINCTROW|DISTRIBUTED|DIV|DO|DOMAIN|DOUBLE|DROP|DUAL|DUMMY|DUMP|DYNAMIC|DYNAMIC_FUNCTION|DYNAMIC_FUNCTION_CODE|EACH|ELEMENT|ELSE|ELSEIF|ENABLE|ENCLOSED|ENCODING|ENCRYPTED|END|END-EXEC|ENUM|EQUALS|ERRLVL|ESCAPE|ESCAPED|EVERY|EXCEPT|EXCEPTION|EXCLUDE|EXCLUDING|EXCLUSIVE|EXEC|EXECUTE|EXISTING|EXISTS|EXIT|EXP|EXPLAIN|EXTERNAL|EXTRACT|FALSE|FETCH|FIELDS|FILE|FILLFACTOR|FILTER|FINAL|FIRST|FLOAT|FLOAT4|FLOAT8|FLOOR|FLUSH|FOLLOWING|FOR|FORCE|FOREIGN|FORTRAN|FORWARD|FOUND|FREE|FREETEXT|FREETEXTTABLE|FREEZE|FROM|FULL|FULLTEXT|FUNCTION|FUSION|GENERAL|GENERATED|GET|GLOBAL|GO|GOTO|GRANT|GRANTED|GRANTS|GREATEST|GROUP|GROUPING|HANDLER|HAVING|HEADER|HEAP|HIERARCHY|HIGH_PRIORITY|HOLD|HOLDLOCK|HOST|HOSTS|HOUR|HOUR_MICROSECOND|HOUR_MINUTE|HOUR_SECOND|IDENTIFIED|IDENTITY|IDENTITY_INSERT|IDENTITYCOL|IF|IGNORE|ILIKE|IMMEDIATE|IMMUTABLE|IMPLEMENTATION|IMPLICIT|IN|INCLUDE|INCLUDING|INCREMENT|INDEX|INDICATOR|INFILE|INFIX|INHERIT|INHERITS|INITIAL|INITIALIZE|INITIALLY|INNER|INOUT|INPUT|INSENSITIVE|INSERT|INSERT_ID|INSTANCE|INSTANTIABLE|INSTEAD|INT|INT1|INT2|INT3|INT4|INT8|INTEGER|INTERSECT|INTERSECTION|INTERVAL|INTO|INVOKER|IS|ISAM|ISNULL|ISOLATION|ITERATE|JOIN|K|KEY|KEY_MEMBER|KEY_TYPE|KEYS|KILL|LANCOMPILER|LANGUAGE|LARGE|LAST|LAST_INSERT_ID|LATERAL|LEADING|LEAST|LEAVE|LEFT|LENGTH|LESS|LEVEL|LIKE|LIMIT|LINENO|LINES|LISTEN|LN|LOAD|LOCAL|LOCALTIME|LOCALTIMESTAMP|LOCATION|LOCATOR|LOCK|LOGIN|LOGS|LONG|LONGBLOB|LONGTEXT|LOOP|LOW_PRIORITY|LOWER|M|MAP|MATCH|MATCHED|MAX|MAX_ROWS|MAXEXTENTS|MAXVALUE|MEDIUMBLOB|MEDIUMINT|MEDIUMTEXT|MEMBER|MERGE|MESSAGE_LENGTH|MESSAGE_OCTET_LENGTH|MESSAGE_TEXT|METHOD|MIDDLEINT|MIN|MIN_ROWS|MINUS|MINUTE|MINUTE_MICROSECOND|MINUTE_SECOND|MINVALUE|MLSLABEL|MOD|MODE|MODIFIES|MODIFY|MODULE|MONTH|MONTHNAME|MORE|MOVE|MULTISET|MUMPS|MYISAM|NAME|NAMES|NATIONAL|NATURAL|NCHAR|NCLOB|NESTING|NEW|NEXT|NO|NO_WRITE_TO_BINLOG|NOAUDIT|NOCHECK|NOCOMPRESS|NOCREATEDB|NOCREATEROLE|NOCREATEUSER|NOINHERIT|NOLOGIN|NONCLUSTERED|NONE|NORMALIZE|NORMALIZED|NOSUPERUSER|NOT|NOTHING|NOTIFY|NOTNULL|NOWAIT|NULL|NULLABLE|NULLIF|NULLS|NUMBER|NUMERIC|OBJECT|OCTET_LENGTH|OCTETS|OF|OFF|OFFLINE|OFFSET|OFFSETS|OIDS|OLD|ON|ONLINE|ONLY|OPEN|OPENDATASOURCE|OPENQUERY|OPENROWSET|OPENXML|OPERATION|OPERATOR|OPTIMIZE|OPTION|OPTIONALLY|OPTIONS|OR|ORDER|ORDERING|ORDINALITY|OTHERS|OUT|OUTER|OUTFILE|OUTPUT|OVER|OVERLAPS|OVERLAY|OVERRIDING|OWNER|PACK_KEYS|PAD|PARAMETER|PARAMETER_MODE|PARAMETER_NAME|PARAMETER_ORDINAL_POSITION|PARAMETER_SPECIFIC_CATALOG|PARAMETER_SPECIFIC_NAME|PARAMETER_SPECIFIC_SCHEMA|PARAMETERS|PARTIAL|PARTITION|PASCAL|PASSWORD|PATH|PCTFREE|PERCENT|PERCENT_RANK|PERCENTILE_CONT|PERCENTILE_DISC|PLACING|PLAN|PLI|POSITION|POSTFIX|POWER|PRECEDING|PRECISION|PREFIX|PREORDER|PREPARE|PREPARED|PRESERVE|PRIMARY|PRINT|PRIOR|PRIVILEGES|PROC|PROCEDURAL|PROCEDURE|PROCESS|PROCESSLIST|PUBLIC|PURGE|QUOTE|RAID0|RAISERROR|RANGE|RANK|RAW|READ|READS|READTEXT|REAL|RECHECK|RECONFIGURE|RECURSIVE|REF|REFERENCES|REFERENCING|REGEXP|REGR_AVGX|REGR_AVGY|REGR_COUNT|REGR_INTERCEPT|REGR_R2|REGR_SLOPE|REGR_SXX|REGR_SXY|REGR_SYY|REINDEX|RELATIVE|RELEASE|RELOAD|RENAME|REPEAT|REPEATABLE|REPLACE|REPLICATION|REQUIRE|RESET|RESIGNAL|RESOURCE|RESTART|RESTORE|RESTRICT|RESULT|RETURN|RETURNED_CARDINALITY|RETURNED_LENGTH|RETURNED_OCTET_LENGTH|RETURNED_SQLSTATE|RETURNS|REVOKE|RIGHT|RLIKE|ROLE|ROLLBACK|ROLLUP|ROUTINE|ROUTINE_CATALOG|ROUTINE_NAME|ROUTINE_SCHEMA|ROW|ROW_COUNT|ROW_NUMBER|ROWCOUNT|ROWGUIDCOL|ROWID|ROWNUM|ROWS|RULE|SAVE|SAVEPOINT|SCALE|SCHEMA|SCHEMA_NAME|SCHEMAS|SCOPE|SCOPE_CATALOG|SCOPE_NAME|SCOPE_SCHEMA|SCROLL|SEARCH|SECOND|SECOND_MICROSECOND|SECTION|SECURITY|SELECT|SELF|SENSITIVE|SEPARATOR|SEQUENCE|SERIALIZABLE|SERVER_NAME|SESSION|SESSION_USER|SET|SETOF|SETS|SETUSER|SHARE|SHOW|SHUTDOWN|SIGNAL|SIMILAR|SIMPLE|SIZE|SMALLINT|SOME|SONAME|SOURCE|SPACE|SPATIAL|SPECIFIC|SPECIFIC_NAME|SPECIFICTYPE|SQL|SQL_BIG_RESULT|SQL_BIG_SELECTS|SQL_BIG_TABLES|SQL_CALC_FOUND_ROWS|SQL_LOG_OFF|SQL_LOG_UPDATE|SQL_LOW_PRIORITY_UPDATES|SQL_SELECT_LIMIT|SQL_SMALL_RESULT|SQL_WARNINGS|SQLCA|SQLCODE|SQLERROR|SQLEXCEPTION|SQLSTATE|SQLWARNING|SQRT|SSL|STABLE|START|STARTING|STATE|STATEMENT|STATIC|STATISTICS|STATUS|STDDEV_POP|STDDEV_SAMP|STDIN|STDOUT|STORAGE|STRAIGHT_JOIN|STRICT|STRING|STRUCTURE|STYLE|SUBCLASS_ORIGIN|SUBLIST|SUBMULTISET|SUBSTRING|SUCCESSFUL|SUM|SUPERUSER|SYMMETRIC|SYNONYM|SYSDATE|SYSID|SYSTEM|SYSTEM_USER|TABLE|TABLE_NAME|TABLES|TABLESAMPLE|TABLESPACE|TEMP|TEMPLATE|TEMPORARY|TERMINATE|TERMINATED|TEXT|TEXTSIZE|THAN|THEN|TIES|TIME|TIMESTAMP|TIMEZONE_HOUR|TIMEZONE_MINUTE|TINYBLOB|TINYINT|TINYTEXT|TO|TOAST|TOP|TOP_LEVEL_COUNT|TRAILING|TRAN|TRANSACTION|TRANSACTION_ACTIVE|TRANSACTIONS_COMMITTED|TRANSACTIONS_ROLLED_BACK|TRANSFORM|TRANSFORMS|TRANSLATE|TRANSLATION|TREAT|TRIGGER|TRIGGER_CATALOG|TRIGGER_NAME|TRIGGER_SCHEMA|TRIM|TRUE|TRUNCATE|TRUSTED|TSEQUAL|TYPE|UESCAPE|UID|UNBOUNDED|UNCOMMITTED|UNDER|UNDO|UNENCRYPTED|UNION|UNIQUE|UNKNOWN|UNLISTEN|UNLOCK|UNNAMED|UNNEST|UNSIGNED|UNTIL|UPDATE|UPDATETEXT|UPPER|USAGE|USE|USER|USER_DEFINED_TYPE_CATALOG|USER_DEFINED_TYPE_CODE|USER_DEFINED_TYPE_NAME|USER_DEFINED_TYPE_SCHEMA|USING|UTC_DATE|UTC_TIME|UTC_TIMESTAMP|VACUUM|VALID|VALIDATE|VALIDATOR|VALUE|VALUES|VAR_POP|VAR_SAMP|VARBINARY|VARCHAR|VARCHAR2|VARCHARACTER|VARIABLE|VARIABLES|VARYING|VERBOSE|VIEW|VOLATILE|WAITFOR|WHEN|WHENEVER|WHERE|WHILE|WIDTH_BUCKET|WINDOW|WITH|WITHIN|WITHOUT|WORK|WRITE|WRITETEXT|X509|XOR|YEAR|YEAR_MONTH|ZEROFILL|ZONE)\\b", 2), C0669R.color.ch_keywords, C0669R.color.ch_keywords), new PatternInfo(Pattern.compile("(#.*)|(--.*)|(((/\\*)+?[\\w\\W]+?(\\*/)+))|\\\".*?\\\"|\\b(true|false|null)\\b", 2), R.color.ch_literals, R.color.ch_literals), new PatternInfo(Pattern.compile("(#.*)|(--.*)|(((/\\*)+?[\\w\\W]+?(\\*/)+))|\\\".*?\\\"|\\b(array|bigint|binary|bit|blob|boolean|char|character|date|dec|decimal|float|int|int8|integer|interval|number|numeric|real|record|serial|serial8|smallint|text|varchar|varying|void)\\b", 2), C0669R.color.ch_keywords, C0669R.color.ch_keywords), new PatternInfo(Pattern.compile("(#.*)|(--.*)|(((/\\*)+?[\\w\\W]+?(\\*/)+))|\\\".*?\\\"|\\b(\\d*[.]?\\d+)\\b"), R.color.ch_numbers, R.color.ch_numbers), new PatternInfo(Pattern.compile("(#.*)|(--.*)|(((/\\*)+?[\\w\\W]+?(\\*/)+))|\"(.*?)\"|'(.*?)'"), R.color.ch_strings, R.color.ch_strings), new PatternInfo(Pattern.compile("(#.*)|(--.*)|(((/\\*)+?[\\w\\W]+?(\\*/)+))"), R.color.ch_comment, R.color.ch_comment)};
        //  public static PatternInfo[] Swift = new PatternInfo[]{new PatternInfo(Pattern.compile(".*\\n"), R.color.ch_plain_text, R.color.ch_plain_text), new PatternInfo(Pattern.compile("/\\*(?:.|[\\n\\r])*?\\*/|//.*+\\/\\/.*|\\/\\/.*|\\\".*?\\\"|\\b(__COLUMN__|__FILE__|__FUNCTION__|__LINE__|as|as!|as?|associativity|break|case|catch|class|continue|convenience|default|defer|deinit|didSet|do|dynamic|dynamicType|else|enum|extension|fallthrough|false|final|for|func|get|guard|if|import|in|indirect|infix|init|inout|internal|is|lazy|left|let|mutating|nil|none|nonmutating|operator|optional|override|postfix|precedence|prefix|private|protocol|Protocol|public|repeat|required|rethrows|return|right|self|Self|set|static|struct|subscript|super|switch|throw|throws|true|try|try!|try?|Type|typealias|unowned|var|weak|where|while|willSet)\\b"), R.color.ch_keywords, R.color.ch_keywords), new PatternInfo(Pattern.compile("/\\*(?:.|[\\n\\r])*?\\*/|//.*+\\/\\/.*|\\/\\/.*|\\\".*?\\\"|\\b(abs|advance|alignof|alignofValue|anyGenerator|assert|assertionFailure|bridgeFromObjectiveC|bridgeFromObjectiveCUnconditional|bridgeToObjectiveC|bridgeToObjectiveCUnconditional|c|contains|count|countElements|countLeadingZeros|debugPrint|debugPrintln|distance|dropFirst|dropLast|dump|encodeBitsAsWords|enumerate|equal|fatalError|filter|find|getBridgedObjectiveCType|getVaList|indices|insertionSort|isBridgedToObjectiveC|isBridgedVerbatimToObjectiveC|isUniquelyReferenced|isUniquelyReferencedNonObjC|join|lazy|lexicographicalCompare|map|max|maxElement|min|minElement|numericCast|overlaps|partition|posix|precondition|preconditionFailure|print|println|quickSort|readLine|reduce|reflect|reinterpretCast|reverse|roundUpToAlignment|sizeof|sizeofValue|sort|split|startsWith|stride|strideof|strideofValue|swap|toString|transcode|underestimateCount|unsafeAddressOf|unsafeBitCast|unsafeDowncast|unsafeUnwrap|unsafeReflect|withExtendedLifetime|withObjectAtPlusZero|withUnsafePointer|withUnsafePointerToObject|withUnsafeMutablePointer|withUnsafeMutablePointers|withUnsafePointer|withUnsafePointers|withVaList|zip)\\b"), C0669R.color.ch_keywords, C0669R.color.ch_keywords), new PatternInfo(Pattern.compile("/\\*(?:.|[\\n\\r])*?\\*/|//.*+\\/\\/.*|\\/\\/.*|\\\".*?\\\"|\\b(true|false|nil)\\b"), C0669R.color.ch_literals, C0669R.color.ch_literals), new PatternInfo(Pattern.compile("/\\*(?:.|[\\n\\r])*?\\*/|//.*+\\/\\/.*|\\/\\/.*|\\\".*?\\\"|\\b(\\d*[.]?\\d+)\\b"), R.color.ch_numbers, R.color.ch_numbers), new PatternInfo(Pattern.compile("/\\*(?:.|[\\n\\r])*?\\*/|//.*+\\/\\/.*|\\/\\/.*|\"(.*?)\"|'(.*?)'"), R.color.ch_strings, R.color.ch_strings), new PatternInfo(Pattern.compile("\\/\\/.*"), R.color.ch_comment, R.color.ch_comment), new PatternInfo(Pattern.compile("/\\*(?:.|[\\n\\r])*?\\*/|//.*+\\/\\/.*"), R.color.ch_comment, R.color.ch_comment)};
        //  public static PatternInfo[] VBNet = new PatternInfo[]{new PatternInfo(Pattern.compile(".*\\n"), R.color.ch_plain_text, R.color.ch_plain_text), new PatternInfo(Pattern.compile("('|REM).*|\\\".*?\\\"|\\b(AddHandler|AddressOf|Alias|And|AndAlso|As|Boolean|ByRef|Byte|ByVal|Call|Case|Catch|CBool|CByte|CChar|CDate|CDec|CDbl|Char|CInt|Class|CLng|CObj|Const|Continue|CSByte|CShort|CSng|CStr|CType|CUInt|CULng|CUShort|Date|Decimal|Declare|Default|Delegate|Dim|DirectCast|Do|Double|Each|Else|ElseIf|End|EndIf|Enum|Erase|Error|Event|Exit|False|Finally|For|Friend|Function|Get|GetType|GetXMLNamespace|Global|GoSub|GoTo|Handles|If|If()|Implements|Imports|Imports|In|Inherits|Integer|Interface|Is|IsNot|Let|Lib|Like|Long|Loop|Me|Mod|Module|MustInherit|MustOverride|MyBase|MyClass|Namespace|Narrowing|New|Next|Not|Nothing|NotInheritable|NotOverridable|Object|Of|On|Operator|Option|Optional|Or|OrElse|Overloads|Overridable|Overrides|ParamArray|Partial|Private|Property|Protected|Public|RaiseEvent|ReadOnly|ReDim|RemoveHandler|Resume|Return|SByte|Select|Set|Shadows|Shared|Short|Single|Static|Step|Stop|String|Structure|Sub|SyncLock|Then|Throw|To|True|Try|TryCast|TypeOf|Variant|Wend|UInteger|ULong|UShort|Using|When|While|Widening|With|WithEvents|WriteOnly|Xor|#Const|#Else|#ElseIf|#End|#If)\\b"), C0669R.color.ch_keywords, C0669R.color.ch_keywords), new PatternInfo(Pattern.compile("('|REM).*|\\\".*?\\\"|\\b(\\d*[.]?\\d+)\\b"), C0669R.color.ch_numbers, C0669R.color.ch_numbers), new PatternInfo(Pattern.compile("('|REM).*|\"(.*?)\"|'(.*?)'"), C0669R.color.ch_strings, C0669R.color.ch_strings), new PatternInfo(Pattern.compile("('|REM).*"), C0669R.color.ch_comment, C0669R.color.ch_comment)};
        //   public static PatternInfo[] WEB = new PatternInfo[]{new PatternInfo(Pattern.compile(".*\\n"), R.color.ch_plain_text, R.color.ch_plain_text), new PatternInfo(Pattern.compile("(?s)<!--.*?-->|<([A-Za-z][A-Za-z0-9]*)\\b[^>]*>|</([A-Za-z][A-Za-z0-9]*)\\b[^>]*>"), R.color.ch_keywords, R.color.ch_keywords), new PatternInfo(Pattern.compile("(?s)<!--.*?-->|(\\S+)=[\"']?((?:.(?![\"']?\\s+(?:\\S+)=|[>\"']))+.)[\"']?"), R.color.ch_keywords, R.color.ch_keywords), new PatternInfo(Pattern.compile("(?s)<!--.*?-->|(.+?):(.+?);"), R.color.ch_keywords, R.color.ch_keywords), new PatternInfo(Pattern.compile("(?s)<!--.*?-->|:[ \t](.+?);"), C0669R.color.ch_comment, C0669R.color.ch_comment), new PatternInfo(Pattern.compile("(?s)<!--.*?-->|\"(.*?)\"|'(.*?)'"), R.color.ch_strings, R.color.ch_strings), new PatternInfo(Pattern.compile("(?s)<!--.*?-->"), R.color.ch_comment, R.color.ch_comment)};
        //     public static PatternInfo[] WEBJQuery = new PatternInfo[]{new PatternInfo(Pattern.compile(".*\\n"), R.color.ch_plain_text, R.color.ch_plain_text)};
    }

    public HighlighterConstant() {
        this.map.put("C", Patterns.C);
        this.map.put("C++", Patterns.C);
        this.map.put("Java", Patterns.Java);
        this.map.put("Python 2", Patterns.Python);
        this.map.put("Python 3", Patterns.Python);
        this.map.put("Python", Patterns.Python);
//        this.map.put("C# (C Sharp)", Patterns.CSharp);
//        this.map.put("Php", Patterns.PHP);
//        this.map.put("VB.Net", Patterns.VBNet);
//        this.map.put("Ruby", Patterns.Ruby);
//        this.map.put("R", Patterns.RLang);
//        this.map.put("HTML", Patterns.WEB);
//        this.map.put("JavaScript", Patterns.WEB);
//        this.map.put("CSS", Patterns.WEB);
//        this.map.put("Shell Script", Patterns.Bash);
//        this.map.put("SQL", Patterns.SQL);
//        this.map.put("Swift", Patterns.Swift);
//        this.map.put("VB 6", Patterns.VBNet);
//        this.map.put("Assembly 8086 ", Patterns.Assembly);
//        this.map.put("Asp.net", Patterns.ASPNet);
//        this.map.put("JQuery", Patterns.WEBJQuery);
    }

    PatternInfo[] getLanguageClass(String str) {
        return (PatternInfo[]) this.map.get(str);
    }
}
